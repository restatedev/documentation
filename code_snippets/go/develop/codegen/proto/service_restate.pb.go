// Code generated by protoc-gen-go-restate. DO NOT EDIT.
// versions:
// - protoc-gen-go-restate v0.1
// - protoc             v3.21.12
// source: proto/service.proto

// <start_service>
// service.proto

package proto

import (
	fmt "fmt"
	sdk_go "github.com/restatedev/sdk-go"
)

// GreeterClient is the client API for Greeter service.
type GreeterClient interface {
	SayHello(opts ...sdk_go.ClientOption) sdk_go.Client[*HelloRequest, *HelloResponse]
}

type greeterClient struct {
	ctx     sdk_go.Context
	options []sdk_go.ClientOption
}

func NewGreeterClient(ctx sdk_go.Context, opts ...sdk_go.ClientOption) GreeterClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &greeterClient{
		ctx,
		cOpts,
	}
}
func (c *greeterClient) SayHello(opts ...sdk_go.ClientOption) sdk_go.Client[*HelloRequest, *HelloResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*HelloRequest](sdk_go.Service[*HelloResponse](c.ctx, "Greeter", "SayHello", cOpts...))
}

// GreeterServer is the server API for Greeter service.
// All implementations should embed UnimplementedGreeterServer
// for forward compatibility.
type GreeterServer interface {
	SayHello(ctx sdk_go.Context, req *HelloRequest) (*HelloResponse, error)
}

// UnimplementedGreeterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(ctx sdk_go.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method SayHello not implemented"), 501)
}
func (UnimplementedGreeterServer) testEmbeddedByValue() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func NewGreeterServer(srv GreeterServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewService("Greeter", sOpts...)
	router = router.Handler("SayHello", sdk_go.NewServiceHandler(srv.SayHello))
	return router
}

// CounterClient is the client API for Counter service.
type CounterClient interface {
	Add(opts ...sdk_go.ClientOption) sdk_go.Client[*AddRequest, *AddResponse]
	Get(opts ...sdk_go.ClientOption) sdk_go.Client[*GetRequest, *GetResponse]
}

type counterClient struct {
	ctx     sdk_go.Context
	key     string
	options []sdk_go.ClientOption
}

func NewCounterClient(ctx sdk_go.Context, key string, opts ...sdk_go.ClientOption) CounterClient {
	cOpts := append([]sdk_go.ClientOption{sdk_go.WithProtoJSON}, opts...)
	return &counterClient{
		ctx,
		key,
		cOpts,
	}
}
func (c *counterClient) Add(opts ...sdk_go.ClientOption) sdk_go.Client[*AddRequest, *AddResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*AddRequest](sdk_go.Object[*AddResponse](c.ctx, "Counter", c.key, "Add", cOpts...))
}

func (c *counterClient) Get(opts ...sdk_go.ClientOption) sdk_go.Client[*GetRequest, *GetResponse] {
	cOpts := c.options
	if len(opts) > 0 {
		cOpts = append(append([]sdk_go.ClientOption{}, cOpts...), opts...)
	}
	return sdk_go.WithRequestType[*GetRequest](sdk_go.Object[*GetResponse](c.ctx, "Counter", c.key, "Get", cOpts...))
}

// CounterServer is the server API for Counter service.
// All implementations should embed UnimplementedCounterServer
// for forward compatibility.
type CounterServer interface {
	Add(ctx sdk_go.ObjectContext, req *AddRequest) (*AddResponse, error)
	Get(ctx sdk_go.ObjectSharedContext, req *GetRequest) (*GetResponse, error)
}

// UnimplementedCounterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCounterServer struct{}

func (UnimplementedCounterServer) Add(ctx sdk_go.ObjectContext, req *AddRequest) (*AddResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Add not implemented"), 501)
}
func (UnimplementedCounterServer) Get(ctx sdk_go.ObjectSharedContext, req *GetRequest) (*GetResponse, error) {
	return nil, sdk_go.TerminalError(fmt.Errorf("method Get not implemented"), 501)
}
func (UnimplementedCounterServer) testEmbeddedByValue() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func NewCounterServer(srv CounterServer, opts ...sdk_go.ServiceDefinitionOption) sdk_go.ServiceDefinition {
	// If the following call panics, it indicates UnimplementedCounterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	sOpts := append([]sdk_go.ServiceDefinitionOption{sdk_go.WithProtoJSON}, opts...)
	router := sdk_go.NewObject("Counter", sOpts...)
	router = router.Handler("Add", sdk_go.NewObjectHandler(srv.Add))
	router = router.Handler("Get", sdk_go.NewObjectSharedHandler(srv.Get))
	return router
}
